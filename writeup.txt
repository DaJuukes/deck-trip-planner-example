This is an adapted, 3D proof of concept for a trip visualization map. It utilizes an integration between Deck.gl and Mapbox to provide building data (this took the majority of time 
to figure out how to work in). Once the buildings were in, I just needed to adapt the Layers code and remove the interactivity. Note: you muust zoom in a fair bit to see the buildings pop up.

The animation is handled by my own code - it uploads the trips' data intoo the layer (along with their timestamps) and incrementally updates the timer by 1 every 100ms. This is what
causes the flowing on the map - as time gets updated, so does the position of the "car".

The main problem with this demonstration is the data. Whereas the given deck.gl example had an easy data set (NYC taxi paths), there is no such set that I could find for San Jose. As such,
I had to randomly generate paths. This is possible using the previous code to get two random points (A,B) in a given range and attempt to path them. However, this runs into numerous issues.
Primarily, there are a lot of invalid pairs of points that the pathing API will reject. The second issue is the overloading of this API. Requesting more than ~20 paths at a time will cause
the requests to fail. To work around this, a seperate dataset must be curated by running the program over and over for specific parts of the city. This process would be very tedious and probably
error-prone due to the data corruption. As such, I decided to showcase one section of San Jose (Campbell) with about 20 trips just as a proof of concept.

Another thing that could be improved with a properly-curated dataset is the erratic speeds of the trips. Currently, they are given a flat 10 units per waypoint, even when the points in 
question vary wildly in distance. It is possible to normalize this with a distance formula, but since the data is in long/lat, it is impractical to get specific distances.